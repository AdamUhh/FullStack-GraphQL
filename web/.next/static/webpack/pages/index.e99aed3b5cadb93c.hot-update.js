"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./src/utils/createUrqlClient.ts":
/*!***************************************!*\
  !*** ./src/utils/createUrqlClient.ts ***!
  \***************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"createUrqlClient\": function() { return /* binding */ createUrqlClient; }\n/* harmony export */ });\n/* harmony import */ var _urql_exchange_graphcache__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @urql/exchange-graphcache */ \"./node_modules/@urql/exchange-graphcache/dist/urql-exchange-graphcache.mjs\");\n/* harmony import */ var urql__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! urql */ \"./node_modules/urql/dist/urql.es.js\");\n/* harmony import */ var wonka__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! wonka */ \"./node_modules/wonka/dist/wonka.mjs\");\n/* harmony import */ var _generated_graphql__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../generated/graphql */ \"./src/generated/graphql.tsx\");\n/* harmony import */ var _betterUpdateQuery__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./betterUpdateQuery */ \"./src/utils/betterUpdateQuery.ts\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/router */ \"./node_modules/next/router.js\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var graphql_tag__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! graphql-tag */ \"./node_modules/graphql-tag/lib/index.js\");\n/* module decorator */ module = __webpack_require__.hmd(module);\n\n\n //comes with urql\n\n\n\n\nfunction _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) {\n        for(var i = 0, arr2 = new Array(arr.length); i < arr.length; i++){\n            arr2[i] = arr[i];\n        }\n        return arr2;\n    }\n}\nfunction _iterableToArray(iter) {\n    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\nfunction _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\nfunction _taggedTemplateLiteral(strings, raw) {\n    if (!raw) {\n        raw = strings.slice(0);\n    }\n    return Object.freeze(Object.defineProperties(strings, {\n        raw: {\n            value: Object.freeze(raw)\n        }\n    }));\n}\nfunction _toConsumableArray(arr) {\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\nfunction _templateObject() {\n    var data = _taggedTemplateLiteral([\n        \"\\n                fragment _ on Post {\\n                  id\\n                  points\\n                }\\n              \"\n    ]);\n    _templateObject = function _templateObject() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject1() {\n    var data = _taggedTemplateLiteral([\n        \"\\n                  fragment __ on Post {\\n                    points\\n                  }\\n                \"\n    ]);\n    _templateObject1 = function _templateObject1() {\n        return data;\n    };\n    return data;\n}\n// Anytime there is an error in anything that is run, its gonna come here\nvar errorExchange = function(param1) {\n    var forward = param1.forward;\n    return function(ops$) {\n        return (0,wonka__WEBPACK_IMPORTED_MODULE_3__.pipe)(forward(ops$), (0,wonka__WEBPACK_IMPORTED_MODULE_3__.tap)(function(param) {\n            var error = param.error;\n            if (error === null || error === void 0 ? void 0 : error.message.includes(\"not authenticated\")) {\n                next_router__WEBPACK_IMPORTED_MODULE_2___default().replace(\"/login\");\n            }\n        }));\n    };\n};\nvar cursorPagination = function() {\n    return function(_parent, fieldArgs, cache, info1) {\n        var entityKey = info1.parentKey, fieldName = info1.fieldName; //Output: parentKey/entityKey is 'Query' and fieldName is 'posts'\n        // will get all the fields in the cache that are under this Query\n        // so if we are querying only 'posts', we will get details such as\n        // ex: fieldKey: 'posts({\"limit\":10})', fieldName: 'posts', arguments: {limit: 10}\n        // So if we had a bunch of data in our cache, (ex: we called 'posts' many times with different arguments)\n        // it will all appear here\n        var allFields = cache.inspectFields(entityKey);\n        // filter out the queries that we dont care about (as there can be more on there that are not just posts, such as the 'me' query)\n        // making sure that the fieldName is equal to 'posts'\n        var fieldInfos = allFields.filter(function(info) {\n            return info.fieldName === fieldName;\n        });\n        var size = fieldInfos.length;\n        if (size === 0) return undefined; // if no data, return undefined\n        //? check if the data is in the cache, and return it from the cache\n        //Output: after clicking load more btn, it will change 'posts({\"limit\":10})' to 'posts({\"limit\":10, \"cursor:\":\"1762541762\"})'\n        var fieldKey = \"\".concat(fieldName, \"(\").concat((0,urql__WEBPACK_IMPORTED_MODULE_4__.stringifyVariables)(fieldArgs), \")\");\n        // check if the posts are in the cache or not\n        var isItInTheCache = cache.resolve(cache.resolve(entityKey, fieldKey), \"posts\"); //Output: when you click load more btn, it will give null, so we need to request more data from the server\n        // when we pass this, urql will think we did not give it all the data, so it will fetch more data from the server\n        info1.partial = !isItInTheCache;\n        var hasMore = true;\n        var results = [];\n        // we may have many fieldInfos for posts, so loop through them all\n        fieldInfos.forEach(function(fi) {\n            var _results;\n            // reading data from the cache\n            // First, we get the stringed key that identifies our Post\n            var key = cache.resolve(entityKey, fi.fieldKey); //Output will be something like Query.posts({\"limit\":10})\n            // Then, we can use the key to get the field data from the entity\n            var data = cache.resolve(key, \"posts\"); //Output will be an array of string Id's like [ 'Post:168', 'Post:106' ]\n            var _hasMore = cache.resolve(key, \"hasMore\");\n            // so we will loop through all of the cache, looping through all of the paginated queries that we have done\n            // and if any of them has '_hasMore' as false, we are just gonna assign 'hasMore' as false\n            // to say that there are no more data to get\n            if (!_hasMore) hasMore = _hasMore;\n            (_results = results).push.apply(_results, _toConsumableArray(data)); //combine the pagination lists (combination of the first, second, etc. pages)\n        });\n        return {\n            __typename: \"PaginatedPosts\",\n            hasMore: hasMore,\n            posts: results\n        }; // found data in the cache\n    };\n};\n// The next-urql package includes setup for react-ssr-prepass already,\n// which automates a lot of the complexity of setting up server-side\n// rendering with urql\nvar createUrqlClient = function(ssrExchange) {\n    return {\n        url: \"http://localhost:5000/graphql\",\n        fetchOptions: {\n            credentials: \"include\"\n        },\n        exchanges: [\n            urql__WEBPACK_IMPORTED_MODULE_4__.dedupExchange,\n            (0,_urql_exchange_graphcache__WEBPACK_IMPORTED_MODULE_5__.cacheExchange)({\n                keys: {\n                    // Its saying PaginatedPosts is a type we created, but we dont have an Id on that field\n                    // so we just have to say that there is no Id\n                    PaginatedPosts: function() {\n                        return null;\n                    }\n                },\n                resolvers: {\n                    Query: {\n                        // Client size resolvers that will run whenever the Query is run\n                        // we can alter how the query result looks\n                        // you can do this for computed values and add field resolvers on the client size too\n                        // so the name of this will match what we have when fetching posts, which is 'posts' insize our posts.graphql\n                        posts: cursorPagination()\n                    }\n                },\n                updates: {\n                    Mutation: {\n                        createPost: function(_result, args, cache, info2) {\n                            // ? Looping over all of the paginated items / queries that we could possibly call\n                            // ? and we invalidate all of them (essentially restart their cache?)\n                            // ?? for output, check out the comments inside cursorPagination with the below variable names\n                            var allFields = cache.inspectFields(\"Query\");\n                            var fieldInfos = allFields.filter(function(info) {\n                                return info.fieldName === \"posts\";\n                            });\n                            // ? Loop to invalidate all (new) queries that will appear due to load more\n                            fieldInfos.forEach(function(fi) {\n                                // console.log(\"start\"); //used for testing\n                                // console.log(cache.inspectFields(\"Query\")); //used for testing\n                                // ? when called, it will essentially update the cache\n                                // ? by invalidating the query and refetch it from the server\n                                // ? Invalidating a specific query\n                                // ?? fi.arguments -> {\"limit\": 15}\n                                cache.invalidate(\"Query\", \"posts\", fi.arguments || {\n                                });\n                            // console.log(cache.inspectFields(\"Query\")); //used for testing\n                            // console.log(\"end\"); //used for testing\n                            });\n                        },\n                        // ?? we could have just done this to update the cache for the votes, but instead\n                        // ?? but he decided to do it another, way which includes reading and updating fragments\n                        // vote: (_result, args, cache, info) => {\n                        //   cache.invalidate(\"Query\", \"posts\", { limit: 15 });\n                        // },\n                        vote: function(_result, args, cache, info) {\n                            var postId = args.postId, value = args.value;\n                            var data = cache.readFragment((0,graphql_tag__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(_templateObject()), {\n                                id: postId\n                            });\n                            console.log(data);\n                            if (data) {\n                                if (data.voteStatus === args.value) return;\n                                var newPoints = data.points + value;\n                                cache.writeFragment((0,graphql_tag__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(_templateObject1()), {\n                                    id: postId,\n                                    points: newPoints\n                                });\n                            }\n                        },\n                        logout: function(_result, args, cache, info) {\n                            // set the MeQuery value to null\n                            (0,_betterUpdateQuery__WEBPACK_IMPORTED_MODULE_1__.betterUpdateQuery)(cache, {\n                                query: _generated_graphql__WEBPACK_IMPORTED_MODULE_0__.MeDocument\n                            }, _result, function() {\n                                return {\n                                    me: null\n                                };\n                            });\n                        },\n                        // This is to update the cache whenever we login or register\n                        // specifically, we are updating the MeQuery and putting the user in it\n                        login: function(_result, args, cache, info) {\n                            // Original Method to do this\n                            // cache.updateQuery({ query: MeDocument }, (data) => {});\n                            // The reason for this is because using the original method\n                            // The typescript types are not good enough\n                            // so we created our own that has better logic for our needs\n                            (0,_betterUpdateQuery__WEBPACK_IMPORTED_MODULE_1__.betterUpdateQuery)(cache, {\n                                query: _generated_graphql__WEBPACK_IMPORTED_MODULE_0__.MeDocument\n                            }, _result, function(result, query) {\n                                if (result.login.errors) {\n                                    return query;\n                                } else {\n                                    return {\n                                        me: result.login.user\n                                    };\n                                }\n                            });\n                        },\n                        register: function(_result, args, cache, info) {\n                            (0,_betterUpdateQuery__WEBPACK_IMPORTED_MODULE_1__.betterUpdateQuery)(cache, {\n                                query: _generated_graphql__WEBPACK_IMPORTED_MODULE_0__.MeDocument\n                            }, _result, function(result, query) {\n                                if (result.register.errors) {\n                                    return query;\n                                } else {\n                                    return {\n                                        me: result.register.user\n                                    };\n                                }\n                            });\n                        }\n                    }\n                }\n            }),\n            errorExchange,\n            ssrExchange,\n            urql__WEBPACK_IMPORTED_MODULE_4__.fetchExchange, \n        ]\n    };\n};\n\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils/createUrqlClient.ts\n");

/***/ })

});