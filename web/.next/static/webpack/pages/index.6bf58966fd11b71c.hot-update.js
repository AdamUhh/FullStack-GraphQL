"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./src/utils/createUrqlClient.ts":
/*!***************************************!*\
  !*** ./src/utils/createUrqlClient.ts ***!
  \***************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"createUrqlClient\": function() { return /* binding */ createUrqlClient; }\n/* harmony export */ });\n/* harmony import */ var _urql_exchange_graphcache__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @urql/exchange-graphcache */ \"./node_modules/@urql/exchange-graphcache/dist/urql-exchange-graphcache.mjs\");\n/* harmony import */ var urql__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! urql */ \"./node_modules/urql/dist/urql.es.js\");\n/* harmony import */ var wonka__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! wonka */ \"./node_modules/wonka/dist/wonka.mjs\");\n/* harmony import */ var _generated_graphql__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../generated/graphql */ \"./src/generated/graphql.tsx\");\n/* harmony import */ var _betterUpdateQuery__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./betterUpdateQuery */ \"./src/utils/betterUpdateQuery.ts\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/router */ \"./node_modules/next/router.js\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var graphql_tag__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! graphql-tag */ \"./node_modules/graphql-tag/lib/index.js\");\n/* module decorator */ module = __webpack_require__.hmd(module);\n\n\n //comes with urql\n\n\n\n\nfunction _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) {\n        for(var i = 0, arr2 = new Array(arr.length); i < arr.length; i++){\n            arr2[i] = arr[i];\n        }\n        return arr2;\n    }\n}\nfunction _iterableToArray(iter) {\n    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\nfunction _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\nfunction _taggedTemplateLiteral(strings, raw) {\n    if (!raw) {\n        raw = strings.slice(0);\n    }\n    return Object.freeze(Object.defineProperties(strings, {\n        raw: {\n            value: Object.freeze(raw)\n        }\n    }));\n}\nfunction _toConsumableArray(arr) {\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\nfunction _templateObject() {\n    var data = _taggedTemplateLiteral([\n        \"\\n                fragment _ on Post {\\n                  id\\n                  points\\n                }\\n              \"\n    ]);\n    _templateObject = function _templateObject() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject1() {\n    var data = _taggedTemplateLiteral([\n        \"\\n                  fragment __ on Post {\\n                    points\\n                    voteStatus\\n                  }\\n                \"\n    ]);\n    _templateObject1 = function _templateObject1() {\n        return data;\n    };\n    return data;\n}\n// Anytime there is an error in anything that is run, its gonna come here\nvar errorExchange = function(param1) {\n    var forward = param1.forward;\n    return function(ops$) {\n        return (0,wonka__WEBPACK_IMPORTED_MODULE_3__.pipe)(forward(ops$), (0,wonka__WEBPACK_IMPORTED_MODULE_3__.tap)(function(param) {\n            var error = param.error;\n            if (error === null || error === void 0 ? void 0 : error.message.includes(\"not authenticated\")) {\n                next_router__WEBPACK_IMPORTED_MODULE_2___default().replace(\"/login\");\n            }\n        }));\n    };\n};\nvar cursorPagination = function() {\n    return function(_parent, fieldArgs, cache, info1) {\n        var entityKey = info1.parentKey, fieldName = info1.fieldName; //Output: parentKey/entityKey is 'Query' and fieldName is 'posts'\n        // will get all the fields in the cache that are under this Query\n        // so if we are querying only 'posts', we will get details such as\n        // ex: fieldKey: 'posts({\"limit\":10})', fieldName: 'posts', arguments: {limit: 10}\n        // So if we had a bunch of data in our cache, (ex: we called 'posts' many times with different arguments)\n        // it will all appear here\n        var allFields = cache.inspectFields(entityKey);\n        // filter out the queries that we dont care about (as there can be more on there that are not just posts, such as the 'me' query)\n        // making sure that the fieldName is equal to 'posts'\n        var fieldInfos = allFields.filter(function(info) {\n            return info.fieldName === fieldName;\n        });\n        var size = fieldInfos.length;\n        if (size === 0) return undefined; // if no data, return undefined\n        //? check if the data is in the cache, and return it from the cache\n        //Output: after clicking load more btn, it will change 'posts({\"limit\":10})' to 'posts({\"limit\":10, \"cursor:\":\"1762541762\"})'\n        var fieldKey = \"\".concat(fieldName, \"(\").concat((0,urql__WEBPACK_IMPORTED_MODULE_4__.stringifyVariables)(fieldArgs), \")\");\n        // check if the posts are in the cache or not\n        var isItInTheCache = cache.resolve(cache.resolve(entityKey, fieldKey), \"posts\"); //Output: when you click load more btn, it will give null, so we need to request more data from the server\n        // when we pass this, urql will think we did not give it all the data, so it will fetch more data from the server\n        info1.partial = !isItInTheCache;\n        var hasMore = true;\n        var results = [];\n        // we may have many fieldInfos for posts, so loop through them all\n        fieldInfos.forEach(function(fi) {\n            var _results;\n            // reading data from the cache\n            // First, we get the stringed key that identifies our Post\n            var key = cache.resolve(entityKey, fi.fieldKey); //Output will be something like Query.posts({\"limit\":10})\n            // Then, we can use the key to get the field data from the entity\n            var data = cache.resolve(key, \"posts\"); //Output will be an array of string Id's like [ 'Post:168', 'Post:106' ]\n            var _hasMore = cache.resolve(key, \"hasMore\");\n            // so we will loop through all of the cache, looping through all of the paginated queries that we have done\n            // and if any of them has '_hasMore' as false, we are just gonna assign 'hasMore' as false\n            // to say that there are no more data to get\n            if (!_hasMore) hasMore = _hasMore;\n            (_results = results).push.apply(_results, _toConsumableArray(data)); //combine the pagination lists (combination of the first, second, etc. pages)\n        });\n        return {\n            __typename: \"PaginatedPosts\",\n            hasMore: hasMore,\n            posts: results\n        }; // found data in the cache\n    };\n};\n// The next-urql package includes setup for react-ssr-prepass already,\n// which automates a lot of the complexity of setting up server-side\n// rendering with urql\nvar createUrqlClient = function(ssrExchange) {\n    return {\n        url: \"http://localhost:5000/graphql\",\n        fetchOptions: {\n            credentials: \"include\"\n        },\n        exchanges: [\n            urql__WEBPACK_IMPORTED_MODULE_4__.dedupExchange,\n            (0,_urql_exchange_graphcache__WEBPACK_IMPORTED_MODULE_5__.cacheExchange)({\n                keys: {\n                    // Its saying PaginatedPosts is a type we created, but we dont have an Id on that field\n                    // so we just have to say that there is no Id\n                    PaginatedPosts: function() {\n                        return null;\n                    }\n                },\n                resolvers: {\n                    Query: {\n                        // Client size resolvers that will run whenever the Query is run\n                        // we can alter how the query result looks\n                        // you can do this for computed values and add field resolvers on the client size too\n                        // so the name of this will match what we have when fetching posts, which is 'posts' insize our posts.graphql\n                        posts: cursorPagination()\n                    }\n                },\n                updates: {\n                    Mutation: {\n                        createPost: function(_result, args, cache, info2) {\n                            // ? Looping over all of the paginated items / queries that we could possibly call\n                            // ? and we invalidate all of them (essentially restart their cache?)\n                            // ?? for output, check out the comments inside cursorPagination with the below variable names\n                            var allFields = cache.inspectFields(\"Query\");\n                            var fieldInfos = allFields.filter(function(info) {\n                                return info.fieldName === \"posts\";\n                            });\n                            // ? Loop to invalidate all (new) queries that will appear due to load more\n                            fieldInfos.forEach(function(fi) {\n                                // console.log(\"start\"); //used for testing\n                                // console.log(cache.inspectFields(\"Query\")); //used for testing\n                                // ? when called, it will essentially update the cache\n                                // ? by invalidating the query and refetch it from the server\n                                // ? Invalidating a specific query\n                                // ?? fi.arguments -> {\"limit\": 15}\n                                cache.invalidate(\"Query\", \"posts\", fi.arguments || {\n                                });\n                            // console.log(cache.inspectFields(\"Query\")); //used for testing\n                            // console.log(\"end\"); //used for testing\n                            });\n                        },\n                        // ?? we could have just done this to update the cache for the votes, but instead\n                        // ?? but he decided to do it another, way which includes reading and updating fragments\n                        // vote: (_result, args, cache, info) => {\n                        //   cache.invalidate(\"Query\", \"posts\", { limit: 15 });\n                        // },\n                        vote: function(_result, args, cache, info) {\n                            var postId = args.postId, value = args.value;\n                            var data = cache.readFragment((0,graphql_tag__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(_templateObject()), {\n                                id: postId\n                            });\n                            console.log(data);\n                            if (data) {\n                                if (data.voteStatus === args.value) return;\n                                // ?? if we havent voted before, it should be a 1, \n                                // ?? but if we have voted, we are switching out vote, so a 2\n                                var newPoints = data.points + (!data.voteStatus ? 1 : 2) * value;\n                                cache.writeFragment((0,graphql_tag__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(_templateObject1()), {\n                                    id: postId,\n                                    points: newPoints,\n                                    voteStatus: value\n                                });\n                            }\n                        },\n                        logout: function(_result, args, cache, info) {\n                            // set the MeQuery value to null\n                            (0,_betterUpdateQuery__WEBPACK_IMPORTED_MODULE_1__.betterUpdateQuery)(cache, {\n                                query: _generated_graphql__WEBPACK_IMPORTED_MODULE_0__.MeDocument\n                            }, _result, function() {\n                                return {\n                                    me: null\n                                };\n                            });\n                        },\n                        // This is to update the cache whenever we login or register\n                        // specifically, we are updating the MeQuery and putting the user in it\n                        login: function(_result, args, cache, info) {\n                            // Original Method to do this\n                            // cache.updateQuery({ query: MeDocument }, (data) => {});\n                            // The reason for this is because using the original method\n                            // The typescript types are not good enough\n                            // so we created our own that has better logic for our needs\n                            (0,_betterUpdateQuery__WEBPACK_IMPORTED_MODULE_1__.betterUpdateQuery)(cache, {\n                                query: _generated_graphql__WEBPACK_IMPORTED_MODULE_0__.MeDocument\n                            }, _result, function(result, query) {\n                                if (result.login.errors) {\n                                    return query;\n                                } else {\n                                    return {\n                                        me: result.login.user\n                                    };\n                                }\n                            });\n                        },\n                        register: function(_result, args, cache, info) {\n                            (0,_betterUpdateQuery__WEBPACK_IMPORTED_MODULE_1__.betterUpdateQuery)(cache, {\n                                query: _generated_graphql__WEBPACK_IMPORTED_MODULE_0__.MeDocument\n                            }, _result, function(result, query) {\n                                if (result.register.errors) {\n                                    return query;\n                                } else {\n                                    return {\n                                        me: result.register.user\n                                    };\n                                }\n                            });\n                        }\n                    }\n                }\n            }),\n            errorExchange,\n            ssrExchange,\n            urql__WEBPACK_IMPORTED_MODULE_4__.fetchExchange, \n        ]\n    };\n};\n\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QkFBQyxDQUFDLEVBQ3JCcUQsT0FBTyxFQUNQLFFBQVEsQ0FBUG1CLE1BQU0sRUFBRUgsS0FBSyxFQUFLLENBQUM7Z0NBQ2xCLEVBQUUsRUFBRUcsTUFBTSxDQUFDRCxLQUFLLENBQUNFLE1BQU0sRUFBRSxDQUFDO29DQUN4QixNQUFNLENBQUNKLEtBQUs7Z0NBQ2QsQ0FBQyxNQUFNLENBQUM7b0NBQ04sTUFBTSxDQUFDLENBQUM7d0NBQ05DLEVBQUUsRUFBRUUsTUFBTSxDQUFDRCxLQUFLLENBQUNHLElBQUk7b0NBQ3ZCLENBQUM7Z0NBQ0gsQ0FBQzs0QkFDSCxDQUFDO3dCQUVMLENBQUM7d0JBRURDLFFBQVEsRUFBRSxRQUFRLENBQVB0QixPQUFPLEVBQUVDLElBQUksRUFBRXhDLEtBQUssRUFBRUMsSUFBSSxFQUFLLENBQUM7NEJBQ3pDZCxxRUFBaUIsQ0FDZmEsS0FBSyxFQUNMLENBQUM7Z0NBQUN1RCxLQUFLLEVBQUVyRSwwREFBVTs0QkFBQyxDQUFDLEVBQ3JCcUQsT0FBTyxFQUNQLFFBQVEsQ0FBUG1CLE1BQU0sRUFBRUgsS0FBSyxFQUFLLENBQUM7Z0NBQ2xCLEVBQUUsRUFBRUcsTUFBTSxDQUFDRyxRQUFRLENBQUNGLE1BQU0sRUFBRSxDQUFDO29DQUMzQixNQUFNLENBQUNKLEtBQUs7Z0NBQ2QsQ0FBQyxNQUFNLENBQUM7b0NBQ04sTUFBTSxDQUFDLENBQUM7d0NBQ05DLEVBQUUsRUFBRUUsTUFBTSxDQUFDRyxRQUFRLENBQUNELElBQUk7b0NBQzFCLENBQUM7Z0NBQ0gsQ0FBQzs0QkFDSCxDQUFDO3dCQUVMLENBQUM7b0JBQ0gsQ0FBQztnQkFDSCxDQUFDO1lBQ0gsQ0FBQztZQUNEdEUsYUFBYTtZQUNicUMsV0FBVztZQUNYN0MsK0NBQWE7UUFDZixDQUFDO0lBQ0gsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvdXRpbHMvY3JlYXRlVXJxbENsaWVudC50cz85MjZlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNhY2hlRXhjaGFuZ2UsIFJlc29sdmVyIH0gZnJvbSBcIkB1cnFsL2V4Y2hhbmdlLWdyYXBoY2FjaGVcIjtcbmltcG9ydCB7XG4gIGRlZHVwRXhjaGFuZ2UsXG4gIEV4Y2hhbmdlLFxuICBmZXRjaEV4Y2hhbmdlLFxuICBzdHJpbmdpZnlWYXJpYWJsZXMsXG59IGZyb20gXCJ1cnFsXCI7XG5pbXBvcnQgeyBwaXBlLCB0YXAgfSBmcm9tIFwid29ua2FcIjsgLy9jb21lcyB3aXRoIHVycWxcbmltcG9ydCB7XG4gIExvZ2luTXV0YXRpb24sXG4gIExvZ291dE11dGF0aW9uLFxuICBNZURvY3VtZW50LFxuICBNZVF1ZXJ5LFxuICBSZWdpc3Rlck11dGF0aW9uLFxuICBWb3RlTXV0YXRpb25WYXJpYWJsZXMsXG59IGZyb20gXCIuLi9nZW5lcmF0ZWQvZ3JhcGhxbFwiO1xuaW1wb3J0IHsgYmV0dGVyVXBkYXRlUXVlcnkgfSBmcm9tIFwiLi9iZXR0ZXJVcGRhdGVRdWVyeVwiO1xuaW1wb3J0IFJvdXRlciBmcm9tIFwibmV4dC9yb3V0ZXJcIjtcbmltcG9ydCBncWwgZnJvbSBcImdyYXBocWwtdGFnXCI7XG5cbi8vIEFueXRpbWUgdGhlcmUgaXMgYW4gZXJyb3IgaW4gYW55dGhpbmcgdGhhdCBpcyBydW4sIGl0cyBnb25uYSBjb21lIGhlcmVcbmNvbnN0IGVycm9yRXhjaGFuZ2U6IEV4Y2hhbmdlID1cbiAgKHsgZm9yd2FyZCB9KSA9PlxuICAob3BzJCkgPT4ge1xuICAgIHJldHVybiBwaXBlKFxuICAgICAgZm9yd2FyZChvcHMkKSxcbiAgICAgIHRhcCgoeyBlcnJvciB9KSA9PiB7XG4gICAgICAgIGlmIChlcnJvcj8ubWVzc2FnZS5pbmNsdWRlcyhcIm5vdCBhdXRoZW50aWNhdGVkXCIpKSB7XG4gICAgICAgICAgUm91dGVyLnJlcGxhY2UoXCIvbG9naW5cIik7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgKTtcbiAgfTtcblxuY29uc3QgY3Vyc29yUGFnaW5hdGlvbiA9ICgpOiBSZXNvbHZlciA9PiB7XG4gIHJldHVybiAoX3BhcmVudCwgZmllbGRBcmdzLCBjYWNoZSwgaW5mbykgPT4ge1xuICAgIGNvbnN0IHsgcGFyZW50S2V5OiBlbnRpdHlLZXksIGZpZWxkTmFtZSB9ID0gaW5mbzsgLy9PdXRwdXQ6IHBhcmVudEtleS9lbnRpdHlLZXkgaXMgJ1F1ZXJ5JyBhbmQgZmllbGROYW1lIGlzICdwb3N0cydcblxuICAgIC8vIHdpbGwgZ2V0IGFsbCB0aGUgZmllbGRzIGluIHRoZSBjYWNoZSB0aGF0IGFyZSB1bmRlciB0aGlzIFF1ZXJ5XG4gICAgLy8gc28gaWYgd2UgYXJlIHF1ZXJ5aW5nIG9ubHkgJ3Bvc3RzJywgd2Ugd2lsbCBnZXQgZGV0YWlscyBzdWNoIGFzXG4gICAgLy8gZXg6IGZpZWxkS2V5OiAncG9zdHMoe1wibGltaXRcIjoxMH0pJywgZmllbGROYW1lOiAncG9zdHMnLCBhcmd1bWVudHM6IHtsaW1pdDogMTB9XG4gICAgLy8gU28gaWYgd2UgaGFkIGEgYnVuY2ggb2YgZGF0YSBpbiBvdXIgY2FjaGUsIChleDogd2UgY2FsbGVkICdwb3N0cycgbWFueSB0aW1lcyB3aXRoIGRpZmZlcmVudCBhcmd1bWVudHMpXG4gICAgLy8gaXQgd2lsbCBhbGwgYXBwZWFyIGhlcmVcbiAgICBjb25zdCBhbGxGaWVsZHMgPSBjYWNoZS5pbnNwZWN0RmllbGRzKGVudGl0eUtleSk7XG5cbiAgICAvLyBmaWx0ZXIgb3V0IHRoZSBxdWVyaWVzIHRoYXQgd2UgZG9udCBjYXJlIGFib3V0IChhcyB0aGVyZSBjYW4gYmUgbW9yZSBvbiB0aGVyZSB0aGF0IGFyZSBub3QganVzdCBwb3N0cywgc3VjaCBhcyB0aGUgJ21lJyBxdWVyeSlcbiAgICAvLyBtYWtpbmcgc3VyZSB0aGF0IHRoZSBmaWVsZE5hbWUgaXMgZXF1YWwgdG8gJ3Bvc3RzJ1xuICAgIGNvbnN0IGZpZWxkSW5mb3MgPSBhbGxGaWVsZHMuZmlsdGVyKChpbmZvKSA9PiBpbmZvLmZpZWxkTmFtZSA9PT0gZmllbGROYW1lKTtcblxuICAgIGNvbnN0IHNpemUgPSBmaWVsZEluZm9zLmxlbmd0aDtcbiAgICBpZiAoc2l6ZSA9PT0gMCkgcmV0dXJuIHVuZGVmaW5lZDsgLy8gaWYgbm8gZGF0YSwgcmV0dXJuIHVuZGVmaW5lZFxuXG4gICAgLy8/IGNoZWNrIGlmIHRoZSBkYXRhIGlzIGluIHRoZSBjYWNoZSwgYW5kIHJldHVybiBpdCBmcm9tIHRoZSBjYWNoZVxuXG4gICAgLy9PdXRwdXQ6IGFmdGVyIGNsaWNraW5nIGxvYWQgbW9yZSBidG4sIGl0IHdpbGwgY2hhbmdlICdwb3N0cyh7XCJsaW1pdFwiOjEwfSknIHRvICdwb3N0cyh7XCJsaW1pdFwiOjEwLCBcImN1cnNvcjpcIjpcIjE3NjI1NDE3NjJcIn0pJ1xuICAgIGNvbnN0IGZpZWxkS2V5ID0gYCR7ZmllbGROYW1lfSgke3N0cmluZ2lmeVZhcmlhYmxlcyhmaWVsZEFyZ3MpfSlgO1xuICAgIC8vIGNoZWNrIGlmIHRoZSBwb3N0cyBhcmUgaW4gdGhlIGNhY2hlIG9yIG5vdFxuICAgIGNvbnN0IGlzSXRJblRoZUNhY2hlID0gY2FjaGUucmVzb2x2ZShcbiAgICAgIGNhY2hlLnJlc29sdmUoZW50aXR5S2V5LCBmaWVsZEtleSkgYXMgc3RyaW5nLFxuICAgICAgXCJwb3N0c1wiXG4gICAgKTsgLy9PdXRwdXQ6IHdoZW4geW91IGNsaWNrIGxvYWQgbW9yZSBidG4sIGl0IHdpbGwgZ2l2ZSBudWxsLCBzbyB3ZSBuZWVkIHRvIHJlcXVlc3QgbW9yZSBkYXRhIGZyb20gdGhlIHNlcnZlclxuICAgIC8vIHdoZW4gd2UgcGFzcyB0aGlzLCB1cnFsIHdpbGwgdGhpbmsgd2UgZGlkIG5vdCBnaXZlIGl0IGFsbCB0aGUgZGF0YSwgc28gaXQgd2lsbCBmZXRjaCBtb3JlIGRhdGEgZnJvbSB0aGUgc2VydmVyXG4gICAgaW5mby5wYXJ0aWFsID0gIWlzSXRJblRoZUNhY2hlO1xuXG4gICAgbGV0IGhhc01vcmUgPSB0cnVlO1xuXG4gICAgbGV0IHJlc3VsdHM6IHN0cmluZ1tdID0gW107XG4gICAgLy8gd2UgbWF5IGhhdmUgbWFueSBmaWVsZEluZm9zIGZvciBwb3N0cywgc28gbG9vcCB0aHJvdWdoIHRoZW0gYWxsXG4gICAgZmllbGRJbmZvcy5mb3JFYWNoKChmaSkgPT4ge1xuICAgICAgLy8gcmVhZGluZyBkYXRhIGZyb20gdGhlIGNhY2hlXG5cbiAgICAgIC8vIEZpcnN0LCB3ZSBnZXQgdGhlIHN0cmluZ2VkIGtleSB0aGF0IGlkZW50aWZpZXMgb3VyIFBvc3RcbiAgICAgIGNvbnN0IGtleSA9IGNhY2hlLnJlc29sdmUoZW50aXR5S2V5LCBmaS5maWVsZEtleSkgYXMgc3RyaW5nOyAvL091dHB1dCB3aWxsIGJlIHNvbWV0aGluZyBsaWtlIFF1ZXJ5LnBvc3RzKHtcImxpbWl0XCI6MTB9KVxuICAgICAgLy8gVGhlbiwgd2UgY2FuIHVzZSB0aGUga2V5IHRvIGdldCB0aGUgZmllbGQgZGF0YSBmcm9tIHRoZSBlbnRpdHlcbiAgICAgIGNvbnN0IGRhdGEgPSBjYWNoZS5yZXNvbHZlKGtleSwgXCJwb3N0c1wiKSBhcyBzdHJpbmdbXTsgLy9PdXRwdXQgd2lsbCBiZSBhbiBhcnJheSBvZiBzdHJpbmcgSWQncyBsaWtlIFsgJ1Bvc3Q6MTY4JywgJ1Bvc3Q6MTA2JyBdXG4gICAgICBjb25zdCBfaGFzTW9yZSA9IGNhY2hlLnJlc29sdmUoa2V5LCBcImhhc01vcmVcIik7XG4gICAgICAvLyBzbyB3ZSB3aWxsIGxvb3AgdGhyb3VnaCBhbGwgb2YgdGhlIGNhY2hlLCBsb29waW5nIHRocm91Z2ggYWxsIG9mIHRoZSBwYWdpbmF0ZWQgcXVlcmllcyB0aGF0IHdlIGhhdmUgZG9uZVxuICAgICAgLy8gYW5kIGlmIGFueSBvZiB0aGVtIGhhcyAnX2hhc01vcmUnIGFzIGZhbHNlLCB3ZSBhcmUganVzdCBnb25uYSBhc3NpZ24gJ2hhc01vcmUnIGFzIGZhbHNlXG4gICAgICAvLyB0byBzYXkgdGhhdCB0aGVyZSBhcmUgbm8gbW9yZSBkYXRhIHRvIGdldFxuICAgICAgaWYgKCFfaGFzTW9yZSkgaGFzTW9yZSA9IF9oYXNNb3JlIGFzIGJvb2xlYW47XG5cbiAgICAgIHJlc3VsdHMucHVzaCguLi5kYXRhKTsgLy9jb21iaW5lIHRoZSBwYWdpbmF0aW9uIGxpc3RzIChjb21iaW5hdGlvbiBvZiB0aGUgZmlyc3QsIHNlY29uZCwgZXRjLiBwYWdlcylcbiAgICB9KTtcblxuICAgIHJldHVybiB7XG4gICAgICBfX3R5cGVuYW1lOiBcIlBhZ2luYXRlZFBvc3RzXCIsIC8vcmVxdWlyZWQgb3IgaXQgd2lsbCBub3Qgd29ya1xuICAgICAgaGFzTW9yZSxcbiAgICAgIHBvc3RzOiByZXN1bHRzLFxuICAgIH07IC8vIGZvdW5kIGRhdGEgaW4gdGhlIGNhY2hlXG4gIH07XG59O1xuXG4vLyBUaGUgbmV4dC11cnFsIHBhY2thZ2UgaW5jbHVkZXMgc2V0dXAgZm9yIHJlYWN0LXNzci1wcmVwYXNzIGFscmVhZHksXG4vLyB3aGljaCBhdXRvbWF0ZXMgYSBsb3Qgb2YgdGhlIGNvbXBsZXhpdHkgb2Ygc2V0dGluZyB1cCBzZXJ2ZXItc2lkZVxuLy8gcmVuZGVyaW5nIHdpdGggdXJxbFxuZXhwb3J0IGNvbnN0IGNyZWF0ZVVycWxDbGllbnQgPSAoc3NyRXhjaGFuZ2U6IGFueSkgPT4gKHtcbiAgdXJsOiBcImh0dHA6Ly9sb2NhbGhvc3Q6NTAwMC9ncmFwaHFsXCIsXG4gIGZldGNoT3B0aW9uczoge1xuICAgIGNyZWRlbnRpYWxzOiBcImluY2x1ZGVcIiBhcyBjb25zdCxcbiAgfSxcbiAgZXhjaGFuZ2VzOiBbXG4gICAgZGVkdXBFeGNoYW5nZSxcbiAgICBjYWNoZUV4Y2hhbmdlKHtcbiAgICAgIGtleXM6IHtcbiAgICAgICAgLy8gSXRzIHNheWluZyBQYWdpbmF0ZWRQb3N0cyBpcyBhIHR5cGUgd2UgY3JlYXRlZCwgYnV0IHdlIGRvbnQgaGF2ZSBhbiBJZCBvbiB0aGF0IGZpZWxkXG4gICAgICAgIC8vIHNvIHdlIGp1c3QgaGF2ZSB0byBzYXkgdGhhdCB0aGVyZSBpcyBubyBJZFxuICAgICAgICBQYWdpbmF0ZWRQb3N0czogKCkgPT4gbnVsbCxcbiAgICAgIH0sXG4gICAgICByZXNvbHZlcnM6IHtcbiAgICAgICAgUXVlcnk6IHtcbiAgICAgICAgICAvLyBDbGllbnQgc2l6ZSByZXNvbHZlcnMgdGhhdCB3aWxsIHJ1biB3aGVuZXZlciB0aGUgUXVlcnkgaXMgcnVuXG4gICAgICAgICAgLy8gd2UgY2FuIGFsdGVyIGhvdyB0aGUgcXVlcnkgcmVzdWx0IGxvb2tzXG4gICAgICAgICAgLy8geW91IGNhbiBkbyB0aGlzIGZvciBjb21wdXRlZCB2YWx1ZXMgYW5kIGFkZCBmaWVsZCByZXNvbHZlcnMgb24gdGhlIGNsaWVudCBzaXplIHRvb1xuICAgICAgICAgIC8vIHNvIHRoZSBuYW1lIG9mIHRoaXMgd2lsbCBtYXRjaCB3aGF0IHdlIGhhdmUgd2hlbiBmZXRjaGluZyBwb3N0cywgd2hpY2ggaXMgJ3Bvc3RzJyBpbnNpemUgb3VyIHBvc3RzLmdyYXBocWxcbiAgICAgICAgICBwb3N0czogY3Vyc29yUGFnaW5hdGlvbigpLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIHVwZGF0ZXM6IHtcbiAgICAgICAgTXV0YXRpb246IHtcbiAgICAgICAgICBjcmVhdGVQb3N0OiAoX3Jlc3VsdCwgYXJncywgY2FjaGUsIGluZm8pID0+IHtcbiAgICAgICAgICAgIC8vID8gTG9vcGluZyBvdmVyIGFsbCBvZiB0aGUgcGFnaW5hdGVkIGl0ZW1zIC8gcXVlcmllcyB0aGF0IHdlIGNvdWxkIHBvc3NpYmx5IGNhbGxcbiAgICAgICAgICAgIC8vID8gYW5kIHdlIGludmFsaWRhdGUgYWxsIG9mIHRoZW0gKGVzc2VudGlhbGx5IHJlc3RhcnQgdGhlaXIgY2FjaGU/KVxuICAgICAgICAgICAgLy8gPz8gZm9yIG91dHB1dCwgY2hlY2sgb3V0IHRoZSBjb21tZW50cyBpbnNpZGUgY3Vyc29yUGFnaW5hdGlvbiB3aXRoIHRoZSBiZWxvdyB2YXJpYWJsZSBuYW1lc1xuICAgICAgICAgICAgY29uc3QgYWxsRmllbGRzID0gY2FjaGUuaW5zcGVjdEZpZWxkcyhcIlF1ZXJ5XCIpO1xuICAgICAgICAgICAgY29uc3QgZmllbGRJbmZvcyA9IGFsbEZpZWxkcy5maWx0ZXIoXG4gICAgICAgICAgICAgIChpbmZvKSA9PiBpbmZvLmZpZWxkTmFtZSA9PT0gXCJwb3N0c1wiXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgLy8gPyBMb29wIHRvIGludmFsaWRhdGUgYWxsIChuZXcpIHF1ZXJpZXMgdGhhdCB3aWxsIGFwcGVhciBkdWUgdG8gbG9hZCBtb3JlXG4gICAgICAgICAgICBmaWVsZEluZm9zLmZvckVhY2goKGZpKSA9PiB7XG4gICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwic3RhcnRcIik7IC8vdXNlZCBmb3IgdGVzdGluZ1xuICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhjYWNoZS5pbnNwZWN0RmllbGRzKFwiUXVlcnlcIikpOyAvL3VzZWQgZm9yIHRlc3RpbmdcblxuICAgICAgICAgICAgICAvLyA/IHdoZW4gY2FsbGVkLCBpdCB3aWxsIGVzc2VudGlhbGx5IHVwZGF0ZSB0aGUgY2FjaGVcbiAgICAgICAgICAgICAgLy8gPyBieSBpbnZhbGlkYXRpbmcgdGhlIHF1ZXJ5IGFuZCByZWZldGNoIGl0IGZyb20gdGhlIHNlcnZlclxuICAgICAgICAgICAgICAvLyA/IEludmFsaWRhdGluZyBhIHNwZWNpZmljIHF1ZXJ5XG4gICAgICAgICAgICAgIC8vID8/IGZpLmFyZ3VtZW50cyAtPiB7XCJsaW1pdFwiOiAxNX1cbiAgICAgICAgICAgICAgY2FjaGUuaW52YWxpZGF0ZShcIlF1ZXJ5XCIsIFwicG9zdHNcIiwgZmkuYXJndW1lbnRzIHx8IHt9KTtcbiAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coY2FjaGUuaW5zcGVjdEZpZWxkcyhcIlF1ZXJ5XCIpKTsgLy91c2VkIGZvciB0ZXN0aW5nXG4gICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiZW5kXCIpOyAvL3VzZWQgZm9yIHRlc3RpbmdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgLy8gPz8gd2UgY291bGQgaGF2ZSBqdXN0IGRvbmUgdGhpcyB0byB1cGRhdGUgdGhlIGNhY2hlIGZvciB0aGUgdm90ZXMsIGJ1dCBpbnN0ZWFkXG4gICAgICAgICAgLy8gPz8gYnV0IGhlIGRlY2lkZWQgdG8gZG8gaXQgYW5vdGhlciwgd2F5IHdoaWNoIGluY2x1ZGVzIHJlYWRpbmcgYW5kIHVwZGF0aW5nIGZyYWdtZW50c1xuICAgICAgICAgIC8vIHZvdGU6IChfcmVzdWx0LCBhcmdzLCBjYWNoZSwgaW5mbykgPT4ge1xuICAgICAgICAgIC8vICAgY2FjaGUuaW52YWxpZGF0ZShcIlF1ZXJ5XCIsIFwicG9zdHNcIiwgeyBsaW1pdDogMTUgfSk7XG4gICAgICAgICAgLy8gfSxcbiAgICAgICAgICB2b3RlOiAoX3Jlc3VsdCwgYXJncywgY2FjaGUsIGluZm8pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgcG9zdElkLCB2YWx1ZSB9ID0gYXJncyBhcyBWb3RlTXV0YXRpb25WYXJpYWJsZXM7XG5cbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBjYWNoZS5yZWFkRnJhZ21lbnQoXG4gICAgICAgICAgICAgIGdxbGBcbiAgICAgICAgICAgICAgICBmcmFnbWVudCBfIG9uIFBvc3Qge1xuICAgICAgICAgICAgICAgICAgaWRcbiAgICAgICAgICAgICAgICAgIHBvaW50c1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYCxcbiAgICAgICAgICAgICAgeyBpZDogcG9zdElkIH0gYXMgYW55XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YSk7XG4gICAgICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgICBpZiAoZGF0YS52b3RlU3RhdHVzID09PSBhcmdzLnZhbHVlKSByZXR1cm47XG4gICAgICAgICAgICAgIC8vID8/IGlmIHdlIGhhdmVudCB2b3RlZCBiZWZvcmUsIGl0IHNob3VsZCBiZSBhIDEsIFxuICAgICAgICAgICAgICAvLyA/PyBidXQgaWYgd2UgaGF2ZSB2b3RlZCwgd2UgYXJlIHN3aXRjaGluZyBvdXQgdm90ZSwgc28gYSAyXG4gICAgICAgICAgICAgIGNvbnN0IG5ld1BvaW50cyA9XG4gICAgICAgICAgICAgICAgKGRhdGEucG9pbnRzIGFzIG51bWJlcikgKyAoIWRhdGEudm90ZVN0YXR1cyA/IDEgOiAyKSAqIHZhbHVlO1xuICAgICAgICAgICAgICBjYWNoZS53cml0ZUZyYWdtZW50KFxuICAgICAgICAgICAgICAgIGdxbGBcbiAgICAgICAgICAgICAgICAgIGZyYWdtZW50IF9fIG9uIFBvc3Qge1xuICAgICAgICAgICAgICAgICAgICBwb2ludHNcbiAgICAgICAgICAgICAgICAgICAgdm90ZVN0YXR1c1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGAsXG4gICAgICAgICAgICAgICAgeyBpZDogcG9zdElkLCBwb2ludHM6IG5ld1BvaW50cywgdm90ZVN0YXR1czogdmFsdWUgfSBhcyBhbnlcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIGxvZ291dDogKF9yZXN1bHQsIGFyZ3MsIGNhY2hlLCBpbmZvKSA9PiB7XG4gICAgICAgICAgICAvLyBzZXQgdGhlIE1lUXVlcnkgdmFsdWUgdG8gbnVsbFxuICAgICAgICAgICAgYmV0dGVyVXBkYXRlUXVlcnk8TG9nb3V0TXV0YXRpb24sIE1lUXVlcnk+KFxuICAgICAgICAgICAgICBjYWNoZSxcbiAgICAgICAgICAgICAgeyBxdWVyeTogTWVEb2N1bWVudCB9LFxuICAgICAgICAgICAgICBfcmVzdWx0LFxuICAgICAgICAgICAgICAoKSA9PiAoeyBtZTogbnVsbCB9KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9LFxuXG4gICAgICAgICAgLy8gVGhpcyBpcyB0byB1cGRhdGUgdGhlIGNhY2hlIHdoZW5ldmVyIHdlIGxvZ2luIG9yIHJlZ2lzdGVyXG4gICAgICAgICAgLy8gc3BlY2lmaWNhbGx5LCB3ZSBhcmUgdXBkYXRpbmcgdGhlIE1lUXVlcnkgYW5kIHB1dHRpbmcgdGhlIHVzZXIgaW4gaXRcbiAgICAgICAgICBsb2dpbjogKF9yZXN1bHQsIGFyZ3MsIGNhY2hlLCBpbmZvKSA9PiB7XG4gICAgICAgICAgICAvLyBPcmlnaW5hbCBNZXRob2QgdG8gZG8gdGhpc1xuICAgICAgICAgICAgLy8gY2FjaGUudXBkYXRlUXVlcnkoeyBxdWVyeTogTWVEb2N1bWVudCB9LCAoZGF0YSkgPT4ge30pO1xuXG4gICAgICAgICAgICAvLyBUaGUgcmVhc29uIGZvciB0aGlzIGlzIGJlY2F1c2UgdXNpbmcgdGhlIG9yaWdpbmFsIG1ldGhvZFxuICAgICAgICAgICAgLy8gVGhlIHR5cGVzY3JpcHQgdHlwZXMgYXJlIG5vdCBnb29kIGVub3VnaFxuICAgICAgICAgICAgLy8gc28gd2UgY3JlYXRlZCBvdXIgb3duIHRoYXQgaGFzIGJldHRlciBsb2dpYyBmb3Igb3VyIG5lZWRzXG4gICAgICAgICAgICBiZXR0ZXJVcGRhdGVRdWVyeTxMb2dpbk11dGF0aW9uLCBNZVF1ZXJ5PihcbiAgICAgICAgICAgICAgY2FjaGUsXG4gICAgICAgICAgICAgIHsgcXVlcnk6IE1lRG9jdW1lbnQgfSxcbiAgICAgICAgICAgICAgX3Jlc3VsdCxcbiAgICAgICAgICAgICAgKHJlc3VsdCwgcXVlcnkpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0LmxvZ2luLmVycm9ycykge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHF1ZXJ5O1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBtZTogcmVzdWx0LmxvZ2luLnVzZXIsXG4gICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9LFxuXG4gICAgICAgICAgcmVnaXN0ZXI6IChfcmVzdWx0LCBhcmdzLCBjYWNoZSwgaW5mbykgPT4ge1xuICAgICAgICAgICAgYmV0dGVyVXBkYXRlUXVlcnk8UmVnaXN0ZXJNdXRhdGlvbiwgTWVRdWVyeT4oXG4gICAgICAgICAgICAgIGNhY2hlLFxuICAgICAgICAgICAgICB7IHF1ZXJ5OiBNZURvY3VtZW50IH0sXG4gICAgICAgICAgICAgIF9yZXN1bHQsXG4gICAgICAgICAgICAgIChyZXN1bHQsIHF1ZXJ5KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5yZWdpc3Rlci5lcnJvcnMpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBxdWVyeTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgbWU6IHJlc3VsdC5yZWdpc3Rlci51c2VyLFxuICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSksXG4gICAgZXJyb3JFeGNoYW5nZSxcbiAgICBzc3JFeGNoYW5nZSxcbiAgICBmZXRjaEV4Y2hhbmdlLFxuICBdLFxufSk7XG4iXSwibmFtZXMiOlsiY2FjaGVFeGNoYW5nZSIsImRlZHVwRXhjaGFuZ2UiLCJmZXRjaEV4Y2hhbmdlIiwic3RyaW5naWZ5VmFyaWFibGVzIiwicGlwZSIsInRhcCIsIk1lRG9jdW1lbnQiLCJiZXR0ZXJVcGRhdGVRdWVyeSIsIlJvdXRlciIsImdxbCIsImVycm9yRXhjaGFuZ2UiLCJmb3J3YXJkIiwib3BzJCIsImVycm9yIiwibWVzc2FnZSIsImluY2x1ZGVzIiwicmVwbGFjZSIsImN1cnNvclBhZ2luYXRpb24iLCJfcGFyZW50IiwiZmllbGRBcmdzIiwiY2FjaGUiLCJpbmZvIiwiZW50aXR5S2V5IiwicGFyZW50S2V5IiwiZmllbGROYW1lIiwiYWxsRmllbGRzIiwiaW5zcGVjdEZpZWxkcyIsImZpZWxkSW5mb3MiLCJmaWx0ZXIiLCJzaXplIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiZmllbGRLZXkiLCJpc0l0SW5UaGVDYWNoZSIsInJlc29sdmUiLCJwYXJ0aWFsIiwiaGFzTW9yZSIsInJlc3VsdHMiLCJmb3JFYWNoIiwiZmkiLCJrZXkiLCJkYXRhIiwiX2hhc01vcmUiLCJwdXNoIiwiX190eXBlbmFtZSIsInBvc3RzIiwiY3JlYXRlVXJxbENsaWVudCIsInNzckV4Y2hhbmdlIiwidXJsIiwiZmV0Y2hPcHRpb25zIiwiY3JlZGVudGlhbHMiLCJleGNoYW5nZXMiLCJrZXlzIiwiUGFnaW5hdGVkUG9zdHMiLCJyZXNvbHZlcnMiLCJRdWVyeSIsInVwZGF0ZXMiLCJNdXRhdGlvbiIsImNyZWF0ZVBvc3QiLCJfcmVzdWx0IiwiYXJncyIsImludmFsaWRhdGUiLCJhcmd1bWVudHMiLCJ2b3RlIiwicG9zdElkIiwidmFsdWUiLCJyZWFkRnJhZ21lbnQiLCJpZCIsImNvbnNvbGUiLCJsb2ciLCJ2b3RlU3RhdHVzIiwibmV3UG9pbnRzIiwicG9pbnRzIiwid3JpdGVGcmFnbWVudCIsImxvZ291dCIsInF1ZXJ5IiwibWUiLCJsb2dpbiIsInJlc3VsdCIsImVycm9ycyIsInVzZXIiLCJyZWdpc3RlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/utils/createUrqlClient.ts\n");

/***/ })

});